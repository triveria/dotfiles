#!/usr/bin/env python

""""

Usage:
convert_pcan_trace_to_linux_candump.py CAN_TRACE.trc

=> output: CAN_TRACE.log

where:
CAN_TRACE.trc is trace in PCAN format.
CAN_TRACE.log is trace in linux format.

---


PCAN trace looks like this:

;$FILEVERSION=1.1
;$STARTTIME=44643.4386680556
;
;   Start time: 23.03.2022 10:31:40.920.0
;   Generated by PCAN-View v4.3.4.615
;
;   Message Number
;   |         Time Offset (ms)
;   |         |        Type
;   |         |        |        ID (hex)
;   |         |        |        |     Data Length
;   |         |        |        |     |   Data Bytes (hex) ...
;   |         |        |        |     |   |
;---+--   ----+----  --+--  ----+---  +  -+ -- -- -- -- -- -- --
     1)    148399.4  Rx         0183  5  F2 12 00 00 00
     2)    148399.8  Rx         0184  5  7E 27 00 00 00
     3)    148400.3  Rx     0CFFE588  8  D3 42 FE 4D A8 4E FF FF
...

and has to be converted to this format:
(148.399400) can0 183#F212000000
(148.399800) can0 184#7E27000000
(148.400300) can0 0CFFE588#D342FE4DA84EFFFF
...

"""

import click
import pandas as pd


def can_or_canfd(id_as_string):
    id_as_hex = int(id_as_string, 16)
    if id_as_hex < 0b11111111111:
        can_id = id_as_string.lstrip('0')
        return can_id
    else:
        can_fd_id = id_as_string
        return can_fd_id


@click.command()
@click.argument("pcan_trace")
def main(pcan_trace):
    """
    Convert PCAN trace to a format that can be used by the linux canplayer
    Usage:
    $ convert_pcan_trace_to_linux_candump.py input.trc output.log
    """
    fields = ["number", "time", "type", "ID", "dlc", "byte0", "byte1", "byte2", "byte3", "byte4", "byte5", "byte6", "byte7"]
    dtypes = {'byte0': str, 'byte1': str, 'byte2': str, 'byte3': str, 'byte4': str, 'byte5': str, 'byte6': str, 'byte7': str}

    d = pd.read_csv(pcan_trace, low_memory=False, skiprows=14, header=None, delim_whitespace=True, names=fields,  dtype=dtypes)
    d.fillna("", inplace=True)
    d["ID"] = d["ID"].apply(can_or_canfd)

    #ref.: https://stackoverflow.com/questions/39291499/how-to-concatenate-multiple-column-values-into-a-single-column-in-pandas-datafra
    cols = ["byte0", "byte1", "byte2", "byte3", "byte4", "byte5", "byte6", "byte7"]
    d['payload'] = d[cols].apply(lambda row: ''.join(row.values.astype(str)), axis=1)

    a = pd.DataFrame()
    # TODO: insert LSC version message: 0cffa347#133742
    a["time"] = d["time"].apply(lambda row: f"({row/1000:.06f})")
    a["device"] = "can0"
    a["ID#payload"] = d[["ID", "payload"]].apply(lambda row: '#'.join(row.values.astype(str)), axis=1)

    base_name = pcan_trace.rstrip(".trc")
    candump_filename = base_name + ".log"
    a.to_csv(candump_filename, sep=" ", header=False, index=False)


if __name__ in ['__main__', '__console__']:
    main()


# cansend can0 0cfff600#12.23.34.45.56.67.78.89
